{"version":3,"file":"static/js/244.0fdd47fb.chunk.js","mappings":"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","sources":["components/MovieList/MovieList.styled.jsx","components/MovieList/MovieList.jsx","components/SearchForm/SearchForm.styled.jsx","components/SearchForm/SearchForm.jsx","pages/Movies.jsx","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from \"react-router-dom\";\n\nexport const List = styled.ul`\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n`;\n\nexport const ListItem = styled.li`\n    display: flex;\n`;\n\nexport const MovieLink = styled(Link)`\n    display: flex;\n    gap: 24px;\n    align-items: center;\n    color: #000000;\n`;\n\nexport const Title = styled.h3`\n    font-size: 32px;\n`;","// import { useState, useEffect } from \"react\";\n// import { getTrendingMovies } from \"services/api\";\nimport { useLocation } from \"react-router-dom\";\nimport { List, ListItem, MovieLink, Title } from \"./MovieList.styled\";\n\nconst MovieList = ({ movies }) => {\n    \n    const location = useLocation();\n    // console.log(location.state)\n\n    return (        \n      <List>\n            {movies && movies.map(({ id, title, poster_path }) => (\n                <ListItem key={id}>\n                    <MovieLink to={`/movies/${id}`} state={{ from: location }}>\n                        <img\n                        src={`https://image.tmdb.org/t/p/w500/${poster_path}`}\n                        alt={title}\n                        width='80'/> \n                        <Title>{title}</Title>\n                    </MovieLink>\n                </ListItem>\n        ))}\n      </List>\n  );\n};\n\nexport default MovieList;","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n    display: flex;\n    align-items: center;\n    width: 100%;\n    max-width: 600px;\n    border: 1px solid #002077; \n    border-radius: 8px;\n    overflow: hidden;\n    margin-bottom: 40px;\n`;\n\nexport const Button = styled.button`\n    display: inline-block;\n    width: 40px;\n    height: 40px;\n    border: 0;\n    background-size: 40%;\n    background-repeat: no-repeat;\n    background-position: center;\n    opacity: 0.6;\n    transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    cursor: pointer;\n    outline: none;\n\n    &:hover {\n        opacity: 1;\n    };\n`;\n\nexport const Input = styled.input`\n    display: inline-block;\n    width: 100%;\n    font: inherit;\n    font-size: 18px;\n    border: none;\n    outline: none;\n    padding-left: 4px;\n    padding-right: 4px;\n`;","import { useState } from \"react\";\nimport Notiflix from 'notiflix';\nimport { ImSearch } from \"react-icons/im\";\nimport { Form, Button, Input } from \"./SearchForm.styled\";\n\nconst SearchForm = ({ onSubmit }) => {\n    const [searchQuery, setSearchQuery] = useState('')\n\n    const handleChange = (e) => {\n        const { value } = e.target;\n        setSearchQuery(value.toLowerCase());\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (searchQuery.trim() === '') {\n            Notiflix.Notify.info('Please enter something!');\n            return;\n        }\n        onSubmit(searchQuery);\n        setSearchQuery('')\n    };\n\n        return (            \n                <Form onSubmit={handleSubmit} >\n                    <Button type=\"submit\">\n                    <ImSearch width='18' height='18'/>\n                    </Button>\n    \n                    <Input\n                        type=\"text\"\n                        value={searchQuery}\n                        onChange={handleChange}\n                        autoComplete=\"off\"\n                        autoFocus\n                        placeholder=\"Search movies\"\n                    />\n                </Form>\n            )\n};\n\nexport default SearchForm;","// import { Link } from 'react-router-dom';\nimport { useState, useEffect } from \"react\";\nimport Notiflix from 'notiflix';\nimport MovieList from \"components/MovieList/MovieList\";\nimport { getMovies } from \"services/api\";\nimport SearchForm from 'components/SearchForm/SearchForm';\nimport { useSearchParams } from \"react-router-dom\";\n\nconst Movies = () => {\n\n  // const [searchQuery, setSearchQuery] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (query === '') {\n      return;\n    };\n\n    setIsLoading(true);\n\n    getMovies(query)\n      .then(data => {\n        if (data.results.length === 0) {\n           Notiflix.Notify.failure('There are no movies...');\n        }\n        \n        setMovies(data.results)\n      })\n      .catch(error => setError(error))\n      .finally(() => { setIsLoading(false) })\n  }, [query]);\n\n  const handleFormSubmit = (searchQuery) => {\n    setSearchParams({query: searchQuery})\n    // setSearchQuery(searchQuery);\n    // setMovies([]);\n  };\n\n  return (\n    <>\n      <SearchForm\n        onSubmit={handleFormSubmit} />\n      {isLoading && <div>Loading...</div>}\n      {error && <div>{error.message}</div>}\n      {movies && <MovieList movies={movies} />}\n    </>\n  );\n};\n\nexport default Movies;","const BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '1b503a470f760c92c3c57decdfe60ef0';\n\n//список найпопулярніших фільмів на сьогодні\n\nexport const getTrendingMovies = () => {\n    return fetch(`${BASE_URL}trending/movie/day?api_key=${API_KEY}`)\n            .then(response => {\n                if (response.ok) {\n                    return response.json()\n                }\n\n                return Promise.reject(new Error('Oops... Something went wrong'))\n            })\n};\n\n//пошук фільму за ключовим словом\n\nexport const getMovies = (searchQuery) => {\n    return fetch(`${BASE_URL}search/movie?query=${searchQuery}&api_key=${API_KEY}&include_adult=false&language=en-US&page=1`)\n        .then(response => {\n            if (response.ok) {\n                return response.json()\n            }\n\n            return Promise.reject(new Error('Oops... Something went wrong'))\n        })\n};\n\n//запит повної інформації про фільм\n\nexport const getMovieInfo = (id) => {\n    return fetch(`${BASE_URL}movie/${id}?api_key=${API_KEY}&language=en-US`)\n        .then(response => {\n            if (response.ok) {\n                return response.json()\n            }\n\n            return Promise.reject(new Error('Oops... Something went wrong'))\n        })\n};\n\n//запит інформації про акторський склад\n\nexport const getMovieCast = (id) => {\n    return fetch(`${BASE_URL}movie/${id}/credits?api_key=${API_KEY}`)\n        .then(response => {\n            if (response.ok) {\n                return response.json()\n            }\n\n            return Promise.reject(new Error('Oops... Something went wrong'))\n        })\n};\n\n//запит оглядів\n\nexport const getMovieReviews = (id) => {\n    return fetch(`${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}`)\n    .then(response => {\n            if (response.ok) {\n                return response.json()\n            }\n\n            return Promise.reject(new Error('Oops... Something went wrong'))\n        })\n};"],"names":["List","styled","ListItem","MovieLink","Link","Title","movies","location","useLocation","map","id","title","poster_path","to","state","from","src","alt","width","Form","Button","Input","onSubmit","useState","searchQuery","setSearchQuery","e","preventDefault","trim","Notiflix","type","height","value","onChange","target","toLowerCase","autoComplete","autoFocus","placeholder","setMovies","error","setError","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","query","get","useEffect","getMovies","then","data","results","length","catch","finally","message","MovieList","BASE_URL","API_KEY","getTrendingMovies","fetch","response","ok","json","Promise","reject","Error","getMovieInfo","getMovieCast","getMovieReviews"],"sourceRoot":""}